/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as IndexImport } from './routes/index'
import { Route as ProductPidImport } from './routes/product.$pid'
import { Route as AppProfileImport } from './routes/app/profile'
import { Route as AppDashboardImport } from './routes/app/dashboard'

// Create Virtual Routes

const ProductsLazyImport = createFileRoute('/products')()

// Create/Update Routes

const ProductsLazyRoute = ProductsLazyImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/products.lazy').then((d) => d.Route))

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductPidRoute = ProductPidImport.update({
  id: '/product/$pid',
  path: '/product/$pid',
  getParentRoute: () => rootRoute,
} as any)

const AppProfileRoute = AppProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppDashboardRoute = AppDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsLazyImport
      parentRoute: typeof rootRoute
    }
    '/app/dashboard': {
      id: '/app/dashboard'
      path: '/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardImport
      parentRoute: typeof AppRouteImport
    }
    '/app/profile': {
      id: '/app/profile'
      path: '/profile'
      fullPath: '/app/profile'
      preLoaderRoute: typeof AppProfileImport
      parentRoute: typeof AppRouteImport
    }
    '/product/$pid': {
      id: '/product/$pid'
      path: '/product/$pid'
      fullPath: '/product/$pid'
      preLoaderRoute: typeof ProductPidImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute
  AppProfileRoute: typeof AppProfileRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
  AppProfileRoute: AppProfileRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/products': typeof ProductsLazyRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/profile': typeof AppProfileRoute
  '/product/$pid': typeof ProductPidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/products': typeof ProductsLazyRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/profile': typeof AppProfileRoute
  '/product/$pid': typeof ProductPidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/products': typeof ProductsLazyRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/profile': typeof AppProfileRoute
  '/product/$pid': typeof ProductPidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/about'
    | '/products'
    | '/app/dashboard'
    | '/app/profile'
    | '/product/$pid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/about'
    | '/products'
    | '/app/dashboard'
    | '/app/profile'
    | '/product/$pid'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/about'
    | '/products'
    | '/app/dashboard'
    | '/app/profile'
    | '/product/$pid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  ProductsLazyRoute: typeof ProductsLazyRoute
  ProductPidRoute: typeof ProductPidRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  ProductsLazyRoute: ProductsLazyRoute,
  ProductPidRoute: ProductPidRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/app",
        "/about",
        "/products",
        "/product/$pid"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/app": {
      "filePath": "app/route.jsx",
      "children": [
        "/app/dashboard",
        "/app/profile"
      ]
    },
    "/about": {
      "filePath": "about.jsx"
    },
    "/products": {
      "filePath": "products.lazy.jsx"
    },
    "/app/dashboard": {
      "filePath": "app/dashboard.jsx",
      "parent": "/app"
    },
    "/app/profile": {
      "filePath": "app/profile.jsx",
      "parent": "/app"
    },
    "/product/$pid": {
      "filePath": "product.$pid.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
